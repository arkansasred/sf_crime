install.packages("swirl")
install.packages("ggplot2")
library(ggplot2)
us_map <- map_data("state")
head(us_map, 3)
install.packages("maps")
library(ggplot2)
us_map <- map_data("state")
head(us_map, 3)
us_map %>%
filter(region %in% c("north carolina", "south carolina")) %>%
ggplot(aes(x = long, y = lat)) +
geom_point()
library(dplyr)
us_map %>%
filter(region %in% c("north carolina", "south carolina")) %>%
ggplot(aes(x = long, y = lat)) +
geom_point()
us_map %>%
filter(region %in% c("north carolina", "south carolina")) %>%
ggplot(aes(x = long, y = lat)) +
geom_path()
us_map %>%
filter(region %in% c("north carolina", "south carolina")) %>%
ggplot(aes(x = long, y = lat, group = group)) +
geom_path()
str(us_map)
us_map %>%
filter(region %in% c("north carolina", "south carolina")) %>%
ggplot(aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "lightblue", color = "black")
V
us_map %>%
filter(region %in% c("north carolina", "south carolina")) %>%
ggplot(aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "lightblue", color = "black") +
theme_void()
us_map %>%
ggplot(aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "lightblue", color = "black") +
theme_void()
library(dplyr)
library(viridis)
votes.repub %>%
tbl_df() %>%
mutate(state = rownames(votes.repub),
state = tolower(state)) %>%
right_join(us_map, by = c("state" = "region")) %>%
ggplot(aes(x = long, y = lat, group = group, fill = `1976`)) +
geom_polygon(color = "black") +
theme_void() +
scale_fill_viridis(name = "Republican\nvotes (%)")
install.packages("viridis")
library(readr)
serial <- read_csv(paste0("https://raw.githubusercontent.com/",
"dgrtwo/serial-ggvis/master/input_data/",
"serial_podcast_data/serial_map_data.csv"))
head(serial, 3)
install.packages("readr")
serial <- serial %>%
mutate(long = -76.8854 + 0.00017022 * x,
lat  = 39.23822 + 1.371014e-04 * y,
tower = Type == "cell-site")
serial %>%
slice(c(1:3, (n() - 3):(n())))
library(readr)
serial <- read_csv(paste0("https://raw.githubusercontent.com/",
"dgrtwo/serial-ggvis/master/input_data/",
"serial_podcast_data/serial_map_data.csv"))
head(serial, 3)
serial <- serial %>%
mutate(long = -76.8854 + 0.00017022 * x,
lat  = 39.23822 + 1.371014e-04 * y,
tower = Type == "cell-site")
serial %>%
slice(c(1:3, (n() - 3):(n())))
maryland <- map_data('county', region = 'maryland')
head(maryland)
baltimore <- maryland %>%
filter(subregion %in% c("baltimore city", "baltimore"))
head(baltimore, 3)
ggplot(baltimore, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "lightblue", color = "black") +
theme_void()
ggplot(baltimore, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "lightblue", color = "black") +
geom_point(data = serial, aes(group = NULL, color = tower)) +
theme_void() +
scale_color_manual(name = "Cell tower", values = c("black", "red"))
library(plotly)
install.packages("plotly")
.libPaths()
install.packages("shiny")
install.packages("htmlwidgets")
install.packages("ggmap")
install.packages("forecast")
library(ggmap)
beijing <- get_map("Beijing", zoom = 12)
ggmap(beijing)
sf<-get_map("San Francisco",zoom=12)
ggmap(sf)
ggmap(beijing)
map_1 <- get_map("Estes Park", zoom = 12,
source = "google", maptype = "terrain") %>%
ggmap(extent = "device")
map_2 <- get_map("Estes Park", zoom = 12,
source = "stamen", maptype = "watercolor") %>%
ggmap(extent = "device")
map_3 <- get_map("Estes Park", zoom = 12,
source = "google", maptype = "hybrid") %>%
ggmap(extent = "device")
library(gridExtra)
grid.arrange(map_1, map_2, map_3, nrow = 1)
get_map(c(2.35, 48.86), zoom = 10) %>%
ggmap(extent = "device")
get_map("Baltimore County", zoom = 10,
source = "stamen", maptype = "toner") %>%
ggmap() +
geom_polygon(data = baltimore, aes(x = long, y = lat, group = group),
color = "navy", fill = "lightblue", alpha = 0.2) +
geom_point(data = serial, aes(x = long, y = lat, color = tower)) +
theme_void() +
scale_color_manual(name = "Cell tower", values = c("black", "red"))
install.packages("rgdal")
install.packages("raster")
install.packages("rgeos")
geocode("Supreme Court of the United States")
mapdist("Baltimore, MD",
"1 First St NE, Washington, DC") %>%
select(from, to, miles)
install.packages("chloroplethr")
install.packages("chloroplethRMaps")
install.packages("chloroplethrMaps")
install.packages("choroplethr")
install.packages("choroplethrMaps")
library(choroplethr)
library(choroplethrMaps)
data(df_pop_county)
df_pop_county %>% slice(1:3)
county_choropleth(df_pop_county)
county_choropleth(df_pop_county, state_zoom = c("colorado", "wyoming"))
county_choropleth(df_pop_county, state_zoom = c("north carolina"),
reference_map = TRUE)
library(readr)
floyd_events <- read_csv("data/floyd_events.csv")
floyd_events %>% slice(1:3)
usamap <- map_data("state") %>%
ggplot(aes(long, lat, group = group)) +
geom_polygon(fill = "white", colour = "black")
map_1 <- usamap + coord_map() + ggtitle("default")
map_2 <- usamap + coord_map("gilbert") + ggtitle("+ coord_map('gilbert')")
map_3 <- usamap + coord_map("conic", lat0 = 30) +
ggtitle("+ coord_map('conic', lat0 = 30)")
grid.arrange(map_1, map_2, map_3, ncol = 1)
library(faraway)
data(worldcup)
library(plotly)
plot_ly(worldcup, type = "scatter",
x = ~ Time, y = ~ Shots, color = ~ Position)
?fortify
install.packages("broom")
library(ggmap)
get_map("Washington, DC")
library(grid)
my_circle <- circleGrob(x = 0.5, y = 0.5, r = 0.5,
gp = gpar(col = "gray", lty = 3))
grid.draw(my_circle)
my_circle <- circleGrob(name = "my_circle",
x = 0.5, y = 0.5, r = 0.5,
gp = gpar(col = "gray", lty = 3))
grid.draw(my_circle)
library(grid)
my_circle <- circleGrob(x = 0.5, y = 0.5, r = 0.5,
gp = gpar(col = "gray", lty = 3))
grid.draw(my_circle)
my_circle <- circleGrob(name = "my_circle",
x = 0.5, y = 0.5, r = 0.5,
gp = gpar(col = "gray", lty = 3))
grid.draw(my_circle)
my_rect <- rectGrob(x = 0.5, y = 0.5, width = 0.8, height = 0.3)
grid.draw(my_rect)
grid.edit("my_circle", gp = gpar(col = "red", lty = 1))
wc_plot <- ggplot(worldcup, aes(x = Time, y = Passes)) +
geom_point()
grid.draw(wc_plot)
library(ggplot2)
wc_plot <- ggplot(worldcup, aes(x = Time, y = Passes)) +
geom_point()
grid.draw(wc_plot)
data(worldcup)
wc_plot
grid.force()
grid.ls()
grid.edit("geom_point.points.1400", gp = gpar(col = "red"))
shiny::runApp('GitHub/soidwd/SOI_shiny')
install.packages("lubridate")
library(shiny)
library(ggplot2)
library(plotly)
library(ggthemes)
library(data.table)
library(lubridate)
library(stringr)
library(dplyr)
library(DT)
.libPaths(c("/usr/local/lib/R/site-library","/usr/lib/R/site-library","/usr/lib/R/library", "C:/Users/openbi/Documents/R/win-library/3.2"))
library(httr)
library(XML)
library(XLConnect)
library(shinyjs)
library(doParallel)
library(foreach)
install.packages("DT");install.packages("httr");install.packages("XML");install.packages("XLConnect");install.packages("shinyjs");install.packages("doParallel");install.packages("foreach")
install.packages("DT")
install.packages("earth")
install.packages("vars")
shiny::runApp('GitHub/soidwd/SOI_shiny')
install.packages("shinyjs")
runApp('GitHub/soidwd/SOI_shiny')
install.packages("shinyBS")
runApp('GitHub/soidwd/SOI_shiny')
install.packages("shinydashboard")
runApp('GitHub/soidwd/SOI_shiny')
install.packages("RJDBC")
runApp('GitHub/soidwd/SOI_shiny')
install.packages("V8")
runApp('GitHub/soidwd/SOI_shiny')
runApp('GitHub/soidwd/SOI_shiny')
runApp('GitHub/soidwd/SOI_shiny')
runApp('GitHub/soidwd/SOI_shiny')
runApp('GitHub/soidwd/SOI_shiny')
runApp('GitHub/soidwd/SOI_shiny')
runApp('GitHub/soidwd/SOI_shiny')
runApp('GitHub/soidwd/SOI_shiny')
runApp('GitHub/soidwd/SOI_shiny')
runApp('GitHub/soidwd/SOI_shiny')
runApp('GitHub/soidwd/SOI_shiny')
runApp('GitHub/soidwd/SOI_shiny')
install.packages("httr")
install.packages("httr")
shiny::runApp('GitHub/soidwd/SOI_shiny')
install.packages("httr")
shiny::runApp('GitHub/soidwd/SOI_shiny')
library(httr)
shiny::runApp('GitHub/soidwd/SOI_shiny')
install.packages("XLConnect")
library(shiny)
library(ggplot2)
library(plotly)
library(ggthemes)
library(data.table)
library(lubridate)
library(stringr)
library(dplyr)
library(DT)
#.libPaths(c("/usr/local/lib/R/site-library","/usr/lib/R/site-library","/usr/lib/R/library", "C:/Users/openbi/Documents/R/win-library/3.2"))
library(httr)
library(XML)
library(XLConnect)
library(shinyjs)
library(doParallel)
library(foreach)
install.packages("doParallel")
runApp('GitHub/soidwd/SOI_shiny')
runApp('GitHub/soidwd/SOI_shiny')
library(devtools)
devtools::install_github("ropensci/plotly")
devtools::install_github('rstudio/DT')
shiny::runApp('~/GitHub/soidwd/SOI_shiny')
runApp('GitHub/soidwd/SOI_shiny')
install.packages("roxygen2")
library(tidyr)
?spread
library(testthat)
?is_a
?expect_that
install,packages("rgeos")
install.packages("rgeos")
library(readr)
library(ggplot2)
library(ggmap)
library(plyr)
library(dplyr)
library(tidyr)
library(rgdal)
library(rgeos)
library(broom)
setwd("..")
setwd("mapping_assignment/")
sf_crime<-read_csv("data/sanfrancisco_incidents_summer_2014.csv")
sf_neighborhoods <- readOGR(dsn="/Users/joshoberman/mapping_assignment/data/ZillowNeighborhoods-CA",
layer="ZillowNeighborhoods-CA")
sf_neighborhoods<-sf_neighborhoods[sf_neighborhoods$CITY=="San Francisco",]
summary(sf_neighborhoods)
sf_crime
lat<-sf_crime$X[1]
long<-sf_crime$Y[1]
over(x(lat,long),sf_neighborhoods)
over(c(lat,long),sf_neighborhoods)
?over
str(sf_neighborhoods)
?SpatialPolygonsDataFrame
str(sf_neighborhoods)
?point.in.polygon
sp<-SpatialPoints(cbind(lat,long))
over(sp,sf_neighborhoods)
coordinates(sf_neighborhoods)
CRS(sf_neighborhoods)
proj4string(sf_neighborhoods)
sp<-SpatialPoints(cbind(lat,long),proj4string = proj4string(sf_neighborhoods))
SpatialPoints(cbind(lat,long),proj4string = proj4string(sf_neighborhoods))
SpatialPoints(cbind(lat,long),proj4string = "+proj=longlat +datum=NAD83 +no_defs +ellps=GRS80 +towgs84=0,0,0")
SpatialPoints(cbind(lat,long),proj4string = proj4string("+proj=longlat +datum=NAD83 +no_defs +ellps=GRS80 +towgs84=0,0,0"))
?SpatialPoints
SpatialPoints(cbind(lat,long),proj4string = CRS(proj4string(sf_neighborhoods)))
pt_sample<-SpatialPoints(cbind(lat,long),proj4string = CRS(proj4string(sf_neighborhoods)))
over(pt_sample,sf_neighborhoods)
findRegion<-function(lat,long,region_data){
pt<-SpatialPoints(cbind(lat,long),CRS(proj4string(region_data)))
over(pt,region_data)$NAME[1]
}
sf_crime%>%
mutate(neighborhood=findRegion(X,Y,sf_neighborhoods))
test
findRegion<-function(lat,long,region_data){
pt<-SpatialPoints(cbind(lat,long),CRS(proj4string(region_data)))
over(pt,region_data)$NAME[1]
}
test<-sf_crime%>%
mutate(neighborhood=findRegion(X,Y,sf_neighborhoods))
test
test$neighborhood
test$Location
historic_vals<-read_csv("data/Neighborhood_Zhvi_1bedroom.csv")
historic_vals[historic_vals$City=="San Francisco",]
sf_historic<-historic_vals[historic_vals$City=="San Francisco",]
sf_historic
unique(sf_historic$RegionName)
sf_crime<-sf_crime%>%
mutate(neighborhood=findRegion(X,Y,sf_neighborhoods))
unique(sf_crime$neighborhood)
unique(unlist(sf_crime$neighborhood))
levels(sf_crime$neighborhood))
levels(sf_crime$neighborhood)
unique(sf_crime$neighborhood)
unique(sf_historic$RegionName)
sf_neighborhoods
summary(sf_neighborhoods)
unique(sf_neighborhoods$NAME)
findRegion(sf_crime$X,sf_crime$Y,sf_neighborhoods)
str(sf_crime)
region_data$NAM
region_data$NAME
sf_neighborhoods
sf_neighborhoods$NAME
View(sf_crime)
View(sf_crime[10000:12000,])
lat<-sf_crime$X[800]
long<-sf_crime$Y[800]
sf_crime$PdDistrict[800]
findRegion(lat,long,sf_neighborhoods)
findRegion<-function(lat,long,region_data){
pt<-SpatialPoints(cbind(lat,long),CRS(proj4string(region_data)))
over(pt,region_data)$NAME
}
findRegion(lat,long,sf_neighborhoods)
findRegion<-function(lat,long,region_data){
pt<-SpatialPoints(cbind(lat,long),CRS(proj4string(region_data)))
unlist(over(pt,region_data)$NAME)
}
findRegion(lat,long,sf_neighborhoods)
pt<-SpatialPoints(cbind(lat,long),CRS(proj4string(sf_neighborhoods)))
over(pt,sf_neighborhoods)
over(pt,sf_neighborhoods)$NAME
over(pt,sf_neighborhoods)$NAME[[1]]
as.character(unlist(over(pt,sf_neighborhoods)$NAME))
findRegion<-function(lat,long,region_data){
pt<-SpatialPoints(cbind(lat,long),CRS(proj4string(sf_neighborhoods)))
as.character(unlist(over(pt,region_data)$NAME))
}
sf_crime<-sf_crime%>%
mutate(neighborhood=findRegion(X,Y,sf_neighborhoods))
View(sf_crime)
View(sf_crime)
unique(sf_crime$neighborhood)
unique(sf_crime$neighborhood)[!is.na(sf_crime$neighborhood)]
unique(sf_crime$neighborhood[!is.na(sf_crime$neighborhood)])
?setdiff
crime_data<-unique(sf_crime$neighborhood[!is.na(sf_crime$neighborhood)])
property_data<-unique(sf_historic$RegionName)
setequal(crime_data,property_data)
setdiff(crime_data,property_data)
property_data
union(crime_data,property_data)
intersect(crime_data,property_data)
sf_historic
str(sf_historic)
sf_crime
sf_historic
?gather
gather(sf_historic,c(RegionID,RegionName))
?spread
gather(sf_historic,key,value,-RegionID,-RegionName,-SizeRank)
sf_historic[-c(City,State,Metro),]
sf_historic[-c("City","State","Metro"),]
select(sf_historic,-City,-State)
sf_historic<-select(sf_historic,-City,-State,-Metro)
gather(sf_historic,key,value,-RegionID,-RegionName,-SizeRank)
sf_historic
sf_historic<-select(sf_historic,-City,-State,-Metro,-CountyName)
sf_historic<-select(sf_historic,-CountyName)
gather(sf_historic,key,value,-RegionID,-RegionName,-SizeRank)
gather(sf_historic,key=year,value=index,-RegionID,-RegionName,-SizeRank)
sf_historic<-gather(sf_historic,key=year,value=index,-RegionID,-RegionName,-SizeRank)
unique(sf_historic$RegionName)
unique(sf_crime$neighborhood)
sf_neighborhoods<-readOGR(dsn="/Users/joshoberman/mapping_assignment/data/ZillowNeighborhoods-CA",
layer="ZillowNeighborhoods-CA")
sf_neighborhoods<-sf_neighborhoods[sf_neighborhoods$CITY=="San Francisco",]
sf_neighborhoods<-sf_neighborhoods[sf_neighborhoods$NAME%in%property_data,]
sf_neighborhoods
summary(sf_crime)
summary(sf_neighborhoods)
property_data
property_data_names
library(stringr)
str_split(property_data," - ")
unlist(str_split(property_data," - "))
property_data<-unlist(str_split(property_data," - "))
sf_neighborhoods<-readOGR(dsn="/Users/joshoberman/mapping_assignment/data/ZillowNeighborhoods-CA",
layer="ZillowNeighborhoods-CA")
sf_neighborhoods<-sf_neighborhoods[sf_neighborhoods$CITY=="San Francisco",]
sf_neighborhoods<-sf_neighborhoods[sf_neighborhoods$NAME%in%property_data,]
findRegion<-function(lat,long,region_data){
pt<-SpatialPoints(cbind(lat,long),CRS(proj4string(sf_neighborhoods)))
as.character(unlist(over(pt,region_data)$NAME))
}
sf_crime<-sf_crime%>%
mutate(neighborhood=findRegion(X,Y,sf_neighborhoods))
View(sf_crime)
sf_neighborhoods<-readOGR(dsn="/Users/joshoberman/mapping_assignment/data/ZillowNeighborhoods-CA",
layer="ZillowNeighborhoods-CA")
sf_neighborhoods<-sf_neighborhoods[sf_neighborhoods$CITY=="San Francisco",]
sf_neighborhoods@data$id<-rownames(sf_neighborhoods@data)
sf_neighborhoods <- gBuffer(sf_neighborhoods, byid=TRUE, width=0)
library(rgeos)
library(rgeo)
library(rgeos)
gBuffer
library(rgdal)
library(rgeos)
?gBuffer
install.packages("rgeos")
library(rgeos)
require(rgeos)
